// See src/meadowgrid/client.py:MeadowGridClientAsync for docstrings

syntax = "proto3";

package meadowgrid;


message StringPair {
    string key = 1;
    string value = 2;
}


// Represents a folder (or folders) that contain code that the meadowgrid server can
// access directly
message ServerAvailableFolder {
    // code_paths[0] will be set as the working directory, and all code_paths will be
    // added to the PYTHONPATH. These code_paths must "make sense" on the machine where
    // the meadowgrid agent is running. One typical use case for this is that the
    // meadowgrid agents have access to a shared filesystem where code has been
    // deployed. Order matters as usual for PYTHONPATH. Another typical use case is to
    // provide no code_paths because all of the code needed is already specified in the
    // interpreter_deployment
    repeated string code_paths = 1;
}


// Represents a git repo at a specific commit
message GitRepoCommit {
    // specifies the url, will be provided to git clone, see
    // https://git-scm.com/docs/git-clone
    string repo_url = 1;

    // specifies the commit to use, will be provided to git checkout [commit] see
    // https://git-scm.com/book/en/v2/Git-Tools-Revision-Selection
    string commit = 2;

    // specifies a relative path within the repo to treat as the "root" directory for
    // the purposes of this deployment
    string path_in_repo = 3;
}


// Represents a git repo on a specific branch. Note that this is NOT deterministic as
// the coordinator will resolve the branch to a specific commit. In order to reproduce
// any results, the code must be run with the specific commit that this resolves to, NOT
// the branch that was originally specified. This should only be used when GitRepoBranch
// cannot be resolved to a GitRepoCommit on the client.
message GitRepoBranch {
    // specifies the url, will be provided to git clone, see
    // https://git-scm.com/docs/git-clone
    string repo_url = 1;

    // specifies the branch to use
    string branch = 2;

    // specifies a relative path within the repo to treat as the "root" directory for
    // the purposes of this deployment
    string path_in_repo = 3;
}


// Represents an interpreter that the meadowgrid server can access directly.
// interpreter_path can be set to meadowgrid.config.MEADOWGRID_INTERPRETER to indicate
// that this job should run using the same interpreter that's being used to run
// meadowgrid, which is only recommended for testing.
message ServerAvailableInterpreter {
    string interpreter_path = 1;
}


// Represents a specific version (aka digest) of a container
message ContainerAtDigest {
    // Together, repository and digest should be such that `docker pull
    // [repository]@[digest]` works
    string repository = 1;
    string digest = 2;
}


// Represents a tag of a container. Note that this is NOT deterministic as the
// coordinator will resolve the tag to a specific digest. In order to reproduce any
// results, the code must be run with the specific digest that this resolves to, NOT the
// tag that was originally specified. This should only be used when ContainerAtTag
// cannot be resolved to a ContainerAtDigest on the client.
message ContainerAtTag {
    // Together, repository and tag should be such that `docker pull [repository]:[tag]`
    // works
    string repository = 1;
    string tag = 2;
}


// Only recommended for testing. Represents a container image that already exists on the
// meadowgrid server. Helpful for testing with locally built images that haven't been
// uploaded to a repository and don't have a digest
message ServerAvailableContainer {
    string image_name = 1;
}


message PyCommandJob {
    repeated string command_line = 1;
    bytes pickled_context_variables = 2;
}


message QualifiedFunctionName {
    string module_name = 1;
    string function_name = 2;
}


message PyFunctionJob {
    oneof function_spec {
        QualifiedFunctionName qualified_function_name = 1;
        bytes pickled_function = 2;
    }
    bytes pickled_function_arguments = 3;
}


message GridTask {
    int32 task_id = 1;
    bytes pickled_function_arguments = 2;
}


message PyGridJob {
    PyFunctionJob function = 1;
    repeated GridTask tasks = 2;
    bool all_tasks_added = 3;
}


message AddTasksToGridJobRequest {
    string job_id = 1;
    repeated GridTask tasks = 2;
    bool all_tasks_added = 3;
}


// Agents have resources, and jobs can use resources. Examples of resources are CPU and
// memory
message Resource {
    string name = 1;
    float value = 2;
}


message Job {

    // job_id uniquely identifies this request to avoid duplicates and for getting the
    // results later. Make sure job_id is unique! Multiple requests with the same job_id
    // will be treated as duplicates even if all of the other parameters are different.
    // Also, job_id may only use string.ascii_letters, numbers, ., -, and _.
    string job_id = 1;
    string job_friendly_name = 2;

    // priority determines which jobs are worked on first. The likelihood that a
    // coordinator assigns a particular job to the next available agent is the priority
    // of that job relative to the sum of the priorities of all jobs that need to be
    // worked on. Roughly, the overall intended effect is that if a particular job has
    // e.g. 1/10th of the sum of all the priorities, 1/10th of the meadowgrid compute
    // resources will be dedicated to this job.
    float priority = 3;

    oneof code_deployment {
        ServerAvailableFolder server_available_folder = 4;
        GitRepoCommit git_repo_commit = 5;
        GitRepoBranch git_repo_branch = 6;
    }
    oneof interpreter_deployment {
        ServerAvailableInterpreter server_available_interpreter = 7;

        // The container specified should be such that running `docker run
        // [repository]@[digest] python --version` works. Currently only works with
        // Linux containers. If code_deployment specifies any code folders, they will be
        // mounted in the container as /meadowgrid/code0, /meadowgrid/code1, etc.
        ContainerAtDigest container_at_digest = 8;
        ContainerAtTag container_at_tag = 9;

        ServerAvailableContainer server_available_container = 10;

        // TODO add requirements_in_code, or conda_environment_yml_in_code etc.
    }

    repeated StringPair environment_variables = 11;

    // result_highest_pickle_protocol tells the remote code what the highest pickle
    // protocol we can read on this end is which will help it determine what pickle
    // protocol to use to send back results. This should almost always be set to
    // pickle.HIGHEST_PROTOCOL in the calling python process
    int32 result_highest_pickle_protocol = 12;

    repeated Resource resources_required = 13;

    // determines what kind of job this is
    oneof job_spec {
        PyCommandJob py_command = 14;
        PyFunctionJob py_function = 15;
        PyGridJob py_grid = 16;
    }
}


message AddJobResponse {
    enum AddJobState {
        DEFAULT = 0;
        ADDED = 1;
        IS_DUPLICATE = 2;
    }
    AddJobState state = 1;
}


message RegisterAgentRequest {
    // The id of the agent that's registering itself
    string agent_id = 1;
    // The resources available on the agent
    repeated Resource resources = 2;
}


message RegisterAgentResponse {
}


message NextJobsRequest {
    string agent_id = 1;
}


message NextJobsResponse {
    repeated JobToRun jobs_to_run = 1;
}


message JobToRun {
    Job job = 1;
    // will only be populated if job is a GridJob
    string grid_worker_id = 2;
    Credentials interpreter_deployment_credentials = 3;
    Credentials code_deployment_credentials = 4;
}


// Represents the state of a process, can apply to a job or a grid task
message ProcessState {
    enum ProcessStateEnum {
        // Reserved, not used
        DEFAULT = 0;

        // These states represent a job that is "in progress"

        // The meadowgrid coordinator has received the Job
        RUN_REQUESTED = 1;

        // The assigned agent has launched the job. pid and log_file_name will be
        // populated.
        RUNNING = 2;

        // These states represent a job that is "done". log_file_name, return_code, and
        // one of pid/container_id will be populated unless otherwise noted.

        // The job has completed normally. pickled_result may be populated.
        SUCCEEDED = 3;
        // There was an exception before launching the job process. pid/container_id,
        // log_file_name, and return_code will not be populated. pickled_result will be
        // populated with a tuple representing the python exception from the agent
        // process (see PYTHON_EXCEPTION for the format).
        RUN_REQUEST_FAILED = 4;
        // A python exception was thrown from the job process. pickled_result will be a
        // pickled tuple (exception_type, exception_message, exception_traceback). We
        // don't pickle the exception itself because it may not be unpicklable on this
        // end (e.g. it involves types that don't exist in the current process' code
        // base). Exceptions are by their nature unexpected, so we shouldn't expect that
        // they can be unpickled on the client.
        PYTHON_EXCEPTION = 5;
        // The process exited with a non-zero return code. This could mean that a
        // non-python exception was thrown (e.g. in the interpreter itself, or in a C
        // extension), or os.exit was called with a non-zero argument, or there was a
        // python exception thrown in the meadowgrid worker code.
        NON_ZERO_RETURN_CODE = 6;
        // We do not have any agents that are capable of running the job given its
        // resource requirements. Either reduce the resource requirements of the job or
        // launch agents that have enough resources.
        RESOURCES_NOT_AVAILABLE = 7;

        // There was an error while reading the outputs of the process. This could mean
        // that the child process somehow silently failed to write its outputs correctly
        // or there was a python exception thrown in the meadowgrid worker code.
        ERROR_GETTING_STATE = 8;

        // This state represents a job that is neither "done" nor "in progress"

        // We do not know the job id
        UNKNOWN = 9;
    }
    ProcessStateEnum state = 1;
    int32 pid = 2;
    string container_id = 3;
    string log_file_name = 4;
    bytes pickled_result = 5;
    int32 return_code = 6;
}


message ProcessStates {
    repeated ProcessState process_states = 1;
}


// A general note on terminology below: a StateRequest is when a client requests the
// state of a Job or GridTask. A plain State is a response to that kind of request. A
// StateUpdate is when an agent is updating the coordinator that a Job/GridTask has
// entered a new state.


// For requesting states of a job
message JobStatesRequest {
    repeated string job_ids = 1;
}


// For updating the state of a job
message JobStateUpdate {
    string job_id = 1;
    // will only be populated if job_id refers to a GridJob
    string grid_worker_id = 2;
    ProcessState process_state = 3;
}


// For updating the states of jobs
message JobStateUpdates {
    string agent_id = 1;
    repeated JobStateUpdate job_states = 2;
}


// For requesting the states of grid tasks
message GridTaskStatesRequest {
    string job_id = 1;
    repeated int32 task_ids_to_ignore = 2;
}


// For getting the state of a grid task
message GridTaskStateResponse {
    int32 task_id = 1;
    ProcessState process_state = 2;
}


// For getting the states of grid tasks
message GridTaskStatesResponse {
    repeated GridTaskStateResponse task_states = 1;
}


// For updating the state of a grid task and getting the next task
message GridTaskUpdateAndGetNextRequest {
    // required, indicates what grid_job we're (optionally) updating and what grid_job
    // the next task should come from
    string job_id = 1;

    string grid_worker_id = 2;

    // -1 means we don't have a completed task to update. >= 0 means we are updating the
    // state on the specified task
    int32 task_id = 3;

    // the updated state for the specified task if task_id >= 0
    ProcessState process_state = 4;
}


message UpdateStateResponse {
}


// This represents a credentials source (see credentials.py)
message AddCredentialsRequest {
    Credentials.Service service = 1;
    string service_url = 2;
    oneof source {
        AwsSecret aws_secret = 3;
        ServerAvailableFile server_available_file = 4;
        // TODO add e.g. Azure secrets, Hashicorp Vault
    }
}


// Represents actual credentials
message Credentials {
    enum Service {
        DEFAULT_SERVICE = 0;
        DOCKER = 1;
        GIT = 2;
    }

    enum Type {
        DEFAULT_TYPE = 0;
        USERNAME_PASSWORD = 1;
        SSH_KEY = 2;
    }

    bytes credentials = 1;
}


// Represents credentials stored in AWS. Must be accessible by the coordinator.
// - For credentials_type = USERNAME_PASSWORD: Expected keys are "username" and
//   "password", e.g. SecretString should be like
//   '{"username":"my_username","password":"my_password"}'
// - For credentials_type = SSH_KEY: Expected key is "private_key", which should contain
//   the contents of the SSH private key file
message AwsSecret {
    Credentials.Type credentials_type = 1;
    string secret_name = 2;
}


// Represents credentials in a file. Must be a file accessible by the coordinator.
// - For credentials_type = USERNAME_PASSWORD: The file must have username on the first
//   line and password on the second line. Final newline character is optional
// - For credentials_type = SSH_KEY: The file should be an SSH private key file
message ServerAvailableFile {
    Credentials.Type credentials_type = 1;
    string path = 2;
}


message AddCredentialsResponse {
}


service MeadowGridCoordinator {
    rpc add_job(Job) returns (AddJobResponse) {};
    rpc add_tasks_to_grid_job(AddTasksToGridJobRequest) returns (AddJobResponse) {};

    rpc register_agent(RegisterAgentRequest) returns (RegisterAgentResponse) {}
    rpc update_job_states(JobStateUpdates) returns (UpdateStateResponse) {};
    rpc get_next_jobs(NextJobsRequest) returns (NextJobsResponse) {};

    // this can only get tasks from the same job
    rpc update_grid_task_state_and_get_next(GridTaskUpdateAndGetNextRequest) returns (GridTask) {};

    rpc get_simple_job_states(JobStatesRequest) returns (ProcessStates) {};
    rpc get_grid_task_states(GridTaskStatesRequest) returns (GridTaskStatesResponse) {};

    rpc add_credentials(AddCredentialsRequest) returns (AddCredentialsResponse) {}
}
